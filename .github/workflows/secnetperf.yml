name: QUIC

on:
  workflow_dispatch:
    inputs:
      logprofile:
        required: false
        default: ''
        type: string
      ref:
        required: false
        default: ''
        type: string
  repository_dispatch:
    types: [run-quic]
      # Args: { guid, sha, ref, pr }

concurrency:
  group: quic-${{ github.event.client_payload.pr || github.event.client_payload.sha }}
  cancel-in-progress: true

permissions: read-all

jobs:
  # For automated identification of the workflow.
  name:
    name: For ${{ github.event.client_payload.guid }}
    needs: []
    runs-on: ubuntu-20.04
    steps:
    - run: echo "no op"

  build-windows:
    name: Build WinUser
    needs: []
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-2022']
        tls: [schannel] # , openssl, openssl3]
    uses: microsoft/msquic/.github/workflows/build-reuse-win.yml@main
    with:
      os: ${{ matrix.os }}
      tls: ${{ matrix.tls }}
      ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}

  build-windows-kernel:
    name: Build WinKernel
    needs: []
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-2022']
    uses: microsoft/msquic/.github/workflows/build-reuse-winkernel.yml@main
    with:
      os: ${{ matrix.os }}
      ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}

  build-ubuntu:
    name: Build Ubuntu
    needs: []
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-20.04']
        tls: [openssl, openssl3]
    uses: microsoft/msquic/.github/workflows/build-reuse-unix.yml@main
    with:
      os: ${{ matrix.os }}
      tls: ${{ matrix.tls }}
      ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}


  test-windows: # This would be 1 enumeration, after CTS has setup the environment with the correct OS type and version.
    name: Test Windows Server 2022 X64
    needs: [build-windows]
    strategy:
      fail-fast: false
      matrix:
        vec: [
          { plat: "windows", os: "windows-2022", arch: "x64", tls: "schannel" },
        ]
    runs-on:
    - self-hosted
    - ${{ matrix.vec.plat }}
    - ${{ matrix.vec.arch }}
    - "secnetperf"
    steps:
    - name: Checkout repository
      uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
      with:
        repository: microsoft/netperf
        ref: 'main'
    - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
      with:
        name: Release-${{ matrix.vec.plat }}-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}
        path: artifacts
    - name: Run secnetperf
      shell: pwsh
      run: test/secnetperf/secnetperf.ps1 -LogProfile ${{ github.event.client_payload.logprofile || inputs.logprofile || 'NULL' }} -MsQuicCommit ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'manual' }}
    - name: Upload Test Results
      if: ${{ always() }}
      uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
      with:
        name: test-results-${{ matrix.vec.plat }}-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}
        path: test-results-${{ matrix.vec.plat }}-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}.ps1
    - name: Upload Logs
      if: ${{ always() }}
      uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
      with:
        name: logs_Release_${{ matrix.vec.plat }}_${{ matrix.vec.arch }}
        path: artifacts/logs

  save-test-results-windows: # Here, we will use the dedicated VM with the correct environment for saving data to a .sqlite using powershell
    permissions: write-all
    name: Save test results to sqlite
    needs: [test-windows] # TODO: CTS determines the dependencies here.
    strategy:
      fail-fast: false
      matrix:
        vec: [
          { plat: "windows", os: "windows-2022", arch: "x64", tls: "schannel" },
        ]
    runs-on:
    - self-hosted
    - ${{ matrix.vec.plat }}
    - ${{ matrix.vec.arch }}
    - "secnetperf"
    steps:
    - name: Checkout repository
      uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
      with:
        repository: microsoft/netperf
        ref: sqlite
    - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
      with:
        name: test-results-${{ matrix.vec.plat }}-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}
        path: test-results-${{ matrix.vec.plat }}-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}.ps1 # TODO: need to download all the artifacts uploaded, and merge them into a single file.
    - run: chmod +x test-results-${{ matrix.vec.plat }}-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}.ps1
    - name: Populate SQLite
      run: ./test-results-${{ matrix.vec.plat }}-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}.ps1
      shell: pwsh
    - name: Commit and merge data
      run: ./tests/secnetperf/post-process-sqlite.ps1
      shell: pwsh
