name: QUIC

on:
  workflow_dispatch:
    inputs:
      logprofile:
        required: false
        default: ''
        type: string
      ref:
        required: false
        default: ''
        type: string
      commit:
        required: false
        default: false
        type: boolean
  repository_dispatch:
    types: [run-quic]
      # Args: { guid, sha, ref, pr }

concurrency:
  group: quic-${{ github.event.client_payload.pr || github.event.client_payload.sha }}
  cancel-in-progress: true

permissions: read-all

jobs:
  # For automated identification of the workflow.
  name:
    name: For ${{ github.event.client_payload.guid }}
    if: ${{ github.event_name == 'repository_dispatch' }}
    needs: []
    runs-on: ubuntu-20.04
    steps:
    - run: |
        echo "guid: ${{ github.event.client_payload.guid }}"
        echo "sha: ${{ github.event.client_payload.sha }}"
        echo "ref: ${{ github.event.client_payload.ref }}"
        echo "pr: ${{ github.event.client_payload.pr }}"

  #
  # Build Jobs
  #

  build-windows:
    name: Build WinUser
    needs: []
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-2022']
        tls: [schannel] # , openssl, openssl3]
    uses: microsoft/msquic/.github/workflows/build-reuse-win.yml@main
    with:
      os: ${{ matrix.os }}
      tls: ${{ matrix.tls }}
      build: -Perf
      ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}

  build-windows-kernel:
    name: Build WinKernel
    needs: []
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-2022']
    uses: microsoft/msquic/.github/workflows/build-reuse-winkernel.yml@main
    with:
      os: ${{ matrix.os }}
      ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}

  build-unix:
    name: Build Unix
    needs: []
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-20.04']
        tls: [openssl] # , openssl3]
    uses: microsoft/msquic/.github/workflows/build-reuse-unix.yml@main
    with:
      os: ${{ matrix.os }}
      tls: ${{ matrix.tls }}
      build: -Perf
      ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}

  #
  # Test Jobs
  #

  run-secnetperf: # This would be 1 enumeration, after CTS has setup the environment with the correct OS type and version.
    name: Run secnetperf
    needs: [build-unix, build-windows, build-windows-kernel]
    strategy:
      fail-fast: false
      matrix:
        vec: [
          { plat: "linux", os: "ubuntu-20.04", arch: "x64", tls: "openssl" },
          { plat: "windows", os: "windows-2022", arch: "x64", tls: "schannel" },
        ]
    runs-on:
    - self-hosted
    - ${{ matrix.vec.arch }}
    - "secnetperf"
    - ${{ matrix.vec.plat }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
      with:
        repository: microsoft/msquic
        ref: ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }}
    - uses: actions/download-artifact@v4
      with:
        name: Release-${{ matrix.vec.plat }}-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}-Perf
        path: artifacts
    - name: Run secnetperf
      shell: pwsh
      run: ./scripts/secnetperf.ps1 `
          -LogProfile ${{ github.event.client_payload.logprofile || inputs.logprofile || 'NULL' }} `
          -MsQuicCommit ${{ github.event.client_payload.sha || github.event.client_payload.ref || inputs.ref || 'main' }} `
          -plat ${{ matrix.vec.plat }} `
          -os ${{ matrix.vec.os }} `
          -arch ${{ matrix.vec.arch }} `
          -tls ${{ matrix.vec.tls }}
    - name: Upload Test Results SQL
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.vec.plat }}-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}
        path: test-results-${{ matrix.vec.plat }}-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}.sql
    - name: Upload Test Results JSON # Data to populate the various pages of the dashboard. Callers of the Netperf API should specify if we want to update this or not.
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: json-test-results-${{ matrix.vec.plat }}-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}
        path: json-test-results-${{ matrix.vec.plat }}-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}.json
    - name: Upload Logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: logs_Release_${{ matrix.vec.plat }}_${{ matrix.vec.arch }}
        path: artifacts/logs

  #
  # Post Processing Jobs
  #

  save-test-results:
    permissions: write-all
    name: Persist Results in DB
    needs: [run-secnetperf]
    if: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.pr == '') || inputs.commit }}
    strategy:
      fail-fast: false
      matrix: #  TODO; remove by uploading to a shared directory
        vec: [
          # { plat: "windows", os: "windows-2022", arch: "x64", tls: "schannel" },
          { plat: "linux", os: "ubuntu-20.04", arch: "x64", tls: "openssl" },
        ]
    runs-on: 'ubuntu-20.04'
    steps:
    - name: Checkout repository
      uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
      with:
        repository: microsoft/netperf
        ref: sqlite
    - uses: actions/download-artifact@v4 # TODO: download all .sql from shared directory.
      with:
        name: test-results-${{ matrix.vec.plat }}-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}
        path: ./
    - run: ls
    - run: python sql.py
    - name: Git commit # TODO: Squash history for this branch to keep size small
      run: 'git config user.name "QUIC Dev[bot]" && git config user.email "quicdev@microsoft.com" && git add netperf.sqlite && git commit -m "Update SQLite" && git push'

  update-intermediary-dashboard-json:
    permissions: write-all
    name: Update Dashboard Files
    needs: [save-test-results]
    strategy:
      fail-fast: false
      matrix: # TODO; remove by uploading to a shared directory
        vec: [
          # { plat: "windows", os: "windows-2022", arch: "x64", tls: "schannel" },
          { plat: "linux", os: "ubuntu-20.04", arch: "x64", tls: "openssl" },
        ]
    runs-on: 'ubuntu-20.04'
    steps:
    - name: Checkout repository
      uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
      with:
        repository: microsoft/netperf
        ref: deploy
    - run: 'rm -f json-test-results-${{ matrix.vec.plat }}-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}.json'
    - uses: actions/download-artifact@v4 # TODO: download all json from shared directory.
      with:
        name: json-test-results-${{ matrix.vec.plat }}-${{ matrix.vec.os }}-${{ matrix.vec.arch }}-${{ matrix.vec.tls }}
        path: ./
    - name: Git commit
      run: 'git config user.name "QUIC Dev[bot]" && git config user.email "quicdev@microsoft.com" && git pull && git add *.json && git commit -m "Update intermediary dashboard files" && git push'
